#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/a5be9150-89e3-4485-b6cd-6a09c5f19d0c 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float humidity;
  CloudContactSensor critical_Zone;
  CloudLight light1;
  CloudLight light2;
  CloudTemperatureSensor temperature;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

#define UART_PORT 1
#define UART1_TX_PIN 17
#define UART1_RX_PIN 16

/*struct rx_data{
    float rx_temperature;
    float rx_humidity;
    int   rx_status;
} rx_data;

struct tx_data{
    int tx_light1;
    int tx_light2;
} tx_data;
*/
void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  Serial1.begin(115200, SERIAL_8N1, UART1_RX_PIN, UART1_TX_PIN);
  Serial.print("ESP32 UART1 Initialized\n");
  pinMode(2,OUTPUT);
 // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
     delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of the network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
   if (Serial1.available()) {
    String inputString = "";
    while (Serial1.available()) {
      char c = Serial1.read();
      inputString += c;
      delay(10); // Small delay to ensure all data is read
    }

    // Parse the input string to extract temperature and humidity
    // Example format: "T:25.4 H:60"
    int tempIndex = inputString.indexOf("T:");
    int humIndex = inputString.indexOf("H:");

    if (tempIndex != -1 && humIndex != -1) {
      // Extract and parse temperature
      int tempEndIndex = inputString.indexOf(' ', tempIndex);
      String tempString = inputString.substring(tempIndex + 2, tempEndIndex);
      float temperature1 = tempString.toFloat();
      Serial.print("Received Temperature: ");
      Serial.println(temperature1);

      // Extract and parse humidity
      String humString = inputString.substring(humIndex + 2);
      float humidity1 = humString.toFloat();
      Serial.print("Received Humidity: ");  
      Serial.println(humidity1);

      // Update cloud variables
      temperature = temperature1; // Update cloud variable
      humidity = humidity1;       // Update cloud variable
    }
  }
  
  
}





/*
  Since Switch1 is READ_WRITE variable, onSwitch1Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onSwitch1Change()  {
  // Add your code here to act upon Switch1 change
  
}

/*
  Since Light1 is READ_WRITE variable, onLight1Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onLight1Change()  {
  // Add your code here to act upon Light1 change
   if(light1 == 1)
  {
      Serial1.write("1");
  }
  if(light1 == 0)
  {
      Serial1.write("2"); 
  }
   digitalWrite(2,light1);
}

/*
  Since Light2 is READ_WRITE variable, onLight2Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onLight2Change()  {
  // Add your code here to act upon Light2 change
   if(light2 == 1)
  {
      Serial1.write("3");
  }
  if(light2 == 0)
  {
      Serial1.write("4");
  }

}

/*
  Since Temperature is READ_WRITE variable, onTemperatureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperatureChange()  {
  // Add your code here to act upon Temperature change
}

/*
  Since Humidity is READ_WRITE variable, onHumidityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumidityChange()  {
  // Add your code here to act upon Humidity change
}

